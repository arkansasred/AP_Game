q()
install.packages('ggplot2')
library(ggplot2)
install.packages('ggplot2')
install.packages('Rcpp')
install.packages('ggplot2')
install.packages('ggplot2')
update.packages(checkBuilt = TRUE)
install.packages('ggplot2')
install.packages('dplyr')
testdat<-data.frame(x=1:10, y=rnorm(100))
testdat[50,2]<-100
plot(testdat$x,testdat$y, type="l", ylim=c(-3,3))
library(ggplot)
library(ggplot2)
g<-ggplot(testdat, aes(x=x,y=y))
g+geom_line()
testdat<-data.frame(x=1:100, y=rnorm(100))
plot(testdat$x,testdat$y, type="l", ylim=c(-3,3))
testdat[50,2]<-100
g<-ggplot(testdat, aes(x=x,y=y))
g+geom_line()
g+geom_line() + ylim(-3,3)
library(nlme)
?nlme
?BodyWeight
library(datasets)
data(airquality)
qplot(Wind, Ozone, airquality)
qplot(Wind, Ozone, data=airquality)
qplot(Wind, Ozone, data=airquality, facets= .~factor(Month))
airquality=transform(airquality, Month=factor(Month))
qplot(Wind, Ozone, data=airquality, facets= .~Month)
?geom
??geom
movies
qplot(votes, rating, data=movies) + geom_smooth()
qplot(votes, rating, data=movies, smooth="loess")
qplot(votes, rating, data=movies) + geom_smooth()
qplot(votes, rating, data=movies) + geom_smooth()
library(ggplot2)
qplot(votes, rating, data=movies) + geom_smooth()
install.packages('seewave')
## tonal synthesis: normal function applied to the amplitude envelope and the instantaneous frequency
norm <- rep(dnorm(-4000:3999, sd=1000), 2)
toto <- synth2(env=norm, ifreq=500+(norm/max(norm))*1000, f=8000, plot=TRUE, osc=TRUE, ovlp=85)
library(seewave)
## tonal synthesis: normal function applied to the amplitude envelope and the instantaneous frequency
norm <- rep(dnorm(-4000:3999, sd=1000), 2)
toto <- synth2(env=norm, ifreq=500+(norm/max(norm))*1000, f=8000, plot=TRUE, osc=TRUE, ovlp=85)
install.packages(c("fftw", "tuneR", "rgl", "rpanel"))
install.packages(c("fftw", "tuneR", "rgl", "rpanel"))
library(seewave)
install.packages(c("fftw", "tuneR", "rgl", "rpanel"))
## tonal synthesis: normal function applied to the amplitude envelope and the instantaneous frequency
norm <- rep(dnorm(-4000:3999, sd=1000), 2)
toto <- synth2(env=norm, ifreq=500+(norm/max(norm))*1000, f=8000, plot=TRUE, osc=TRUE, ovlp=85)
## tonal synthesis: normal function applied to the amplitude envelope and the instantaneous frequency
norm <- rep(dnorm(-4000:3999, sd=1000), 2)
toto <- synth2(env=norm, ifreq=500+(norm/max(norm))*1000, f=8000, plot=TRUE, osc=TRUE, ovlp=85)
library(seewave)
norm <- rep(dnorm(-4000:3999, sd=1000), 2)
toto <- synth2(env=norm, ifreq=500+(norm/max(norm))*1000, f=8000, plot=TRUE, osc=TRUE, ovlp=85)
remove.packages("seewave")
library(seewave)
norm <- rep(dnorm(-4000:3999, sd=1000), 2)
toto <- synth2(env=norm, ifreq=500+(norm/max(norm))*1000, f=8000, plot=TRUE, osc=TRUE, ovlp=85)
?nrow
load("/home/josh/Desktop/AP_Game_Data/data.RData")
load("/home/josh/Desktop/AP_Game_Data/data.RData")
load("/home/josh/Desktop/AP_Game_Data/data.RData")
remove(list = ls())
source('~/Documents/AP_Game/readConditions.R')
readAll(31)
setwd('Documents/AP_Game/')
readAll(31)
scoreData<-readAll(31)
t.test(FinalScore~Condition, data = scoreData)
str(scoreData)
source('~/Documents/AP_Game/readConditions.R')
scoreData<-readAll(31)
t.test(FinalScore~Condition, data = scoreData)
source('~/Documents/AP_Game/readTrajectories.R')
trajects<-readEverything()
